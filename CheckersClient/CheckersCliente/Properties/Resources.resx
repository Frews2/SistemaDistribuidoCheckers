<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnswerQuestion" xml:space="preserve">
    <value>Answer</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChangePassword" xml:space="preserve">
    <value>Change your password</value>
  </data>
  <data name="ConfirmationQuestion" xml:space="preserve">
    <value>Confirmation question</value>
  </data>
  <data name="E-mail" xml:space="preserve">
    <value>E-mail</value>
  </data>
  <data name="EnterMail" xml:space="preserve">
    <value>Enter your e-mail</value>
  </data>
  <data name="EnterNickname" xml:space="preserve">
    <value>Enter your nickname</value>
  </data>
  <data name="EnterPin" xml:space="preserve">
    <value>Enter your Pin</value>
  </data>
  <data name="ForgotPassword" xml:space="preserve">
    <value>Forgot password?</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="GamesLost" xml:space="preserve">
    <value>Games Lost</value>
  </data>
  <data name="GamesPlayed" xml:space="preserve">
    <value>Games Played</value>
  </data>
  <data name="GamesWon" xml:space="preserve">
    <value>Games Won</value>
  </data>
  <data name="LogIn" xml:space="preserve">
    <value>Log in</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>Menu</value>
  </data>
  <data name="MinimunLength" xml:space="preserve">
    <value>Una o mas casillas no contienen los elementos minimos suficientes</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="Nickname" xml:space="preserve">
    <value>Nickname</value>
  </data>
  <data name="NicknameInstructions" xml:space="preserve">
    <value>Enter your nickname to receive a confirmation pin on your linked mail and change your password</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Play" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="Rank" xml:space="preserve">
    <value>Rank</value>
  </data>
  <data name="Ranking" xml:space="preserve">
    <value>Ranking</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register new account</value>
  </data>
  <data name="ResendE-mail" xml:space="preserve">
    <value>Resend e-mail</value>
  </data>
  <data name="Rankings" xml:space="preserve">
    <value>Rankings Table</value>
  </data>
  <data name="RegistrationDate" xml:space="preserve">
    <value>Registration Date</value>
  </data>
  <data name="Return" xml:space="preserve">
    <value>Go Back</value>
  </data>
  <data name="Rules" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="SendMail" xml:space="preserve">
    <value>Send mail</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="VerifyAccount" xml:space="preserve">
    <value>Verify account</value>
  </data>
  <data name="VerifyPassword" xml:space="preserve">
    <value>Confirm Password</value>
  </data>
  <data name="WaitMessage" xml:space="preserve">
    <value>Please wait till the timer ends to resend the mail</value>
  </data>
  <data name="GameRules" xml:space="preserve">
    <value>Checkers is a two player game.
Each player receives 12 colored discs at the start of the game, with black and red as the colors.

The board consists of 64 squares, 32 dark and 32 light.
Each of the pieces is placed on the 12 dark squares closest to the player.

The black player always moves first, then each player takes turns.

The only moves allowed are on the dark squares, which means that the pieces always move diagonally.
Single pieces can only advance towards their opponent.

Any player making a non-capturing move can only move one square at a time.

A capture move or jump involves jumping over one of the opponent's pieces in a diagonal line.
In a single jump, only one piece can be captured although multiple jumps
or the catches can be made in one turn.

Any captured pieces are removed from the board.

Whenever the capture option is available, the player must make the leap.
In cases where more than one capture is possible, the player can choose which jump to make.

When a player's piece manages to reach the opponent's front row,
he is crowned and made "king". The kings are distinguished from the other pieces by having a crown symbol at the top.

While kings can still only move diagonally, they can move back and forth.

Kings can jump in multiple directions within the same turn.
Individual pieces on the other hand can change direction diagonally, although they are limited to one move forward.

The game ends when a player can no longer make any moves.
This can result from all of a player's pieces being captured or blocked from making further moves.</value>
  </data>
  <data name="PlayerData" xml:space="preserve">
    <value>Player data</value>
  </data>
  <data name="CanadianCheckers" xml:space="preserve">
    <value>Canadian Checkers</value>
  </data>
  <data name="ClassicCheckers" xml:space="preserve">
    <value>Classic Checkers</value>
  </data>
  <data name="GameMode" xml:space="preserve">
    <value>Game Mode</value>
  </data>
  <data name="ItalianCheckers" xml:space="preserve">
    <value>Italian Checkers</value>
  </data>
  <data name="SuicideCheckers" xml:space="preserve">
    <value>Suicide Checkers</value>
  </data>
  <data name="MatchmakingStandBy" xml:space="preserve">
    <value>Please wait while we found a match for you</value>
  </data>
  <data name="Game" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="Players" xml:space="preserve">
    <value>Players</value>
  </data>
  <data name="Accuser" xml:space="preserve">
    <value>Accuser</value>
  </data>
  <data name="ReportAdministration" xml:space="preserve">
    <value>Player Reports Administration</value>
  </data>
  <data name="ReportDescription" xml:space="preserve">
    <value>Report Description</value>
  </data>
  <data name="Reported" xml:space="preserve">
    <value>Reported</value>
  </data>
  <data name="ReportID" xml:space="preserve">
    <value>Report ID</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="ViewReports" xml:space="preserve">
    <value>View Reports</value>
  </data>
  <data name="Ban" xml:space="preserve">
    <value>Ban</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="BannedLoginMessage" xml:space="preserve">
    <value>You have been banned. Access Denied.</value>
  </data>
  <data name="DoesNotExistLoginMessage" xml:space="preserve">
    <value>The player you have entered does not exist</value>
  </data>
  <data name="DuplicateEmailMessage" xml:space="preserve">
    <value>Entered email already exists. Please try another one.</value>
  </data>
  <data name="DuplicateNicknameMessage" xml:space="preserve">
    <value>Nickname chosen already exists. Please try another one.</value>
  </data>
  <data name="EmailNotSentMessage" xml:space="preserve">
    <value>Could not send email to your account due to an unforeseen error. Please try again.</value>
  </data>
  <data name="EmailSentMessage" xml:space="preserve">
    <value>An email was sent to your provided email account. Please check it.</value>
  </data>
  <data name="IncorrectPasswordMessage" xml:space="preserve">
    <value>Incorrect Password. Try Again.</value>
  </data>
  <data name="LoadMessage" xml:space="preserve">
    <value>Please wait while info loads</value>
  </data>
  <data name="NoConnectionMessage" xml:space="preserve">
    <value>Could not connect to database. Try again later.</value>
  </data>
  <data name="NoInfoMessage" xml:space="preserve">
    <value>No information was found from database</value>
  </data>
  <data name="NoMatchFoundErrorMessage" xml:space="preserve">
    <value>An error occurred and we could not find a match. Please try again.</value>
  </data>
  <data name="NotVerifiedMessage" xml:space="preserve">
    <value>Account not verified. Please verify account.</value>
  </data>
  <data name="PasswordChangeErrorMessage" xml:space="preserve">
    <value>An error occurred and we could not change your password. Please try again.</value>
  </data>
  <data name="PlayerAlreadyBannedErrorMessage" xml:space="preserve">
    <value>Error. The player is already banned and cannot be banned again.</value>
  </data>
  <data name="PlayerBannedMessage" xml:space="preserve">
    <value>Player banned successfuly</value>
  </data>
  <data name="SuccessfulPasswordChangeMessage" xml:space="preserve">
    <value>Congratulations. Password changed successfuly.</value>
  </data>
  <data name="SuccessfulRegisterMessage" xml:space="preserve">
    <value>You have been registered successfully but need to verify your account.</value>
  </data>
  <data name="SuccessfulVerificationMessage" xml:space="preserve">
    <value>Congratulations. Account verification successful</value>
  </data>
  <data name="UnableToBanErrorMessage" xml:space="preserve">
    <value>An error occurred and the player was unable to be banned. Try again.</value>
  </data>
  <data name="UnexplainedErrorMessage" xml:space="preserve">
    <value>Something unexpected occurred. Try again.</value>
  </data>
  <data name="WrongAnswerMessage" xml:space="preserve">
    <value>Wrong answer. Please try again.</value>
  </data>
  <data name="WrongPINMessage" xml:space="preserve">
    <value>The entered PIN number is incorrect. Try Again.</value>
  </data>
  <data name="ExplainReport" xml:space="preserve">
    <value>Explain your reasons for report</value>
  </data>
  <data name="Report" xml:space="preserve">
    <value>Report</value>
  </data>
  <data name="Pass" xml:space="preserve">
    <value>Pass turn</value>
  </data>
</root>